package de.atb.context.rdf.registry;

/*-
 * #%L
 * ATB Context Extraction Core Lib
 * %%
 * Copyright (C) 2020 ATB – Institut für angewandte Systemtechnik Bremen GmbH
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */


import org.protege.owl.codegeneration.WrappedIndividual;
import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

import java.util.Collection;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: SW_Service_Configuration_OntologyWrapper <br>
 * @version generated on Mon Oct 05 21:07:01 BST 2015 by Giovanni
 */

public interface SW_Service_Configuration_OntologyWrapper extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#hasConfiguration_SWService
     */
     
    /**
     * Gets all property values for the hasConfiguration_SWService property.<p>
     * 
     * @return a collection of values for the hasConfiguration_SWService property.
     */
    Collection<? extends SW_Service_OntologyWrapper> getHasConfigurationSWService();

    /**
     * Checks if the class has a hasConfiguration_SWService property value.<p>
     * 
     * @return true if there is a hasConfiguration_SWService property value.
     */
    boolean hasHasConfigurationSWService();

    /**
     * Adds a hasConfiguration_SWService property value.<p>
     * 
     * @param newHasConfigurationSWService the hasConfiguration_SWService property value to be added
     */
    void addHasConfigurationSWService(SW_Service_OntologyWrapper newHasConfigurationSWService);

    /**
     * Removes a hasConfiguration_SWService property value.<p>
     * 
     * @param oldHasConfigurationSWService the hasConfiguration_SWService property value to be removed.
     */
    void removeHasConfigurationSWService(SW_Service_OntologyWrapper oldHasConfigurationSWService);


    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#IdName
     */
     
    /**
     * Gets all property values for the IdName property.<p>
     * 
     * @return a collection of values for the IdName property.
     */
    Collection<? extends String> getIdName();

    /**
     * Checks if the class has a IdName property value.<p>
     * 
     * @return true if there is a IdName property value.
     */
    boolean hasIdName();

    /**
     * Adds a IdName property value.<p>
     * 
     * @param newIdName the IdName property value to be added
     */
    void addIdName(String newIdName);

    /**
     * Removes a IdName property value.<p>
     * 
     * @param oldIdName the IdName property value to be removed.
     */
    void removeIdName(String oldIdName);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#host
     */
     
    /**
     * Gets all property values for the host property.<p>
     * 
     * @return a collection of values for the host property.
     */
    Collection<? extends String> getHost();

    /**
     * Checks if the class has a host property value.<p>
     * 
     * @return true if there is a host property value.
     */
    boolean hasHost();

    /**
     * Adds a host property value.<p>
     * 
     * @param newHost the host property value to be added
     */
    void addHost(String newHost);

    /**
     * Removes a host property value.<p>
     * 
     * @param oldHost the host property value to be removed.
     */
    void removeHost(String oldHost);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#location
     */
     
    /**
     * Gets all property values for the location property.<p>
     * 
     * @return a collection of values for the location property.
     */
    Collection<? extends String> getLocation();

    /**
     * Checks if the class has a location property value.<p>
     * 
     * @return true if there is a location property value.
     */
    boolean hasLocation();

    /**
     * Adds a location property value.<p>
     * 
     * @param newLocation the location property value to be added
     */
    void addLocation(String newLocation);

    /**
     * Removes a location property value.<p>
     * 
     * @param oldLocation the location property value to be removed.
     */
    void removeLocation(String oldLocation);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#name
     */
     
    /**
     * Gets all property values for the name property.<p>
     * 
     * @return a collection of values for the name property.
     */
    Collection<? extends String> getName();

    /**
     * Checks if the class has a name property value.<p>
     * 
     * @return true if there is a name property value.
     */
    boolean hasName();

    /**
     * Adds a name property value.<p>
     * 
     * @param newName the name property value to be added
     */
    void addName(String newName);

    /**
     * Removes a name property value.<p>
     * 
     * @param oldName the name property value to be removed.
     */
    void removeName(String oldName);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#proxy
     */
     
    /**
     * Gets all property values for the proxy property.<p>
     * 
     * @return a collection of values for the proxy property.
     */
    Collection<? extends String> getProxy();

    /**
     * Checks if the class has a proxy property value.<p>
     * 
     * @return true if there is a proxy property value.
     */
    boolean hasProxy();

    /**
     * Adds a proxy property value.<p>
     * 
     * @param newProxy the proxy property value to be added
     */
    void addProxy(String newProxy);

    /**
     * Removes a proxy property value.<p>
     * 
     * @param oldProxy the proxy property value to be removed.
     */
    void removeProxy(String oldProxy);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#server
     */
     
    /**
     * Gets all property values for the server property.<p>
     * 
     * @return a collection of values for the server property.
     */
    Collection<? extends String> getServer();

    /**
     * Checks if the class has a server property value.<p>
     * 
     * @return true if there is a server property value.
     */
    boolean hasServer();

    /**
     * Adds a server property value.<p>
     * 
     * @param newServer the server property value to be added
     */
    void addServer(String newServer);

    /**
     * Removes a server property value.<p>
     * 
     * @param oldServer the server property value to be removed.
     */
    void removeServer(String oldServer);



    /* ***************************************************
     * Property http://www.semanticweb.org/giovanni/ontologies/2014/10/untitled-ontology-55#type
     */
     
    /**
     * Gets all property values for the type property.<p>
     * 
     * @return a collection of values for the type property.
     */
    Collection<? extends String> getType();

    /**
     * Checks if the class has a type property value.<p>
     * 
     * @return true if there is a type property value.
     */
    boolean hasType();

    /**
     * Adds a type property value.<p>
     * 
     * @param newType the type property value to be added
     */
    void addType(String newType);

    /**
     * Removes a type property value.<p>
     * 
     * @param oldType the type property value to be removed.
     */
    void removeType(String oldType);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
